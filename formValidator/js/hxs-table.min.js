(function ($) {
    $.extend({
        tableUtil: {
            _option: {},
            init: function (options) {
                $.tableUtil._option = options;
                var $tablelist = $('#tablelist');
                $tablelist.bootstrapTable('destroy').bootstrapTable({
                    // url: options.url,
                    // method: 'post',                      //请求方式（*）
                    ajax : function (request) {
                        let requstParams = $.tableUtil._option.requestParams;
                        const tableInfo = CommonService.sendPostRequest(options.url,requstParams);
                        if(tableInfo.status){
                            request.success({
                                rows: tableInfo.data.content,
                                total : tableInfo.data.totalElements

                            });
                        }
                    },

                    method:"POST",              // 请求方式
                    totalField:"total",        // 总页数
                    dataField: "rows",        //后台返回数据 key
                    toolbar: '#toolbar',                //工具按钮用哪个容器
                    striped: true,                      //是否显示行间隔色
                    cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                    // contentType: "application/x-www-form-urlencoded", // 发送到服务器的数据编码类型, application/x-www-form-urlencoded为了实现post方式提交
                    sortable: false,                     //是否启用排序
                    sortOrder: "desc",                   //排序方式
                    sortStable: true,                   // 设置为 true 将获得稳定的排序
                    queryParams: $.tableUtil.queryParams,//传递参数（*）
                    queryParamsType: '',
                    pagination: true,                   //是否显示分页（*）
                    paginationLoop:false,
                    sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                    pageNumber: 1,                       //初始化加载第一页，默认第一页
                    pageSize: 20,                       //每页的记录行数（*）
                    pageList: [20, 40, 50, 100, 150],        //可供选择的每页的行数（*）
                    search: true,                       //是否启用搜索框 根据sidePagination选择从前后台搜索
                    strictSearch: true,                 //设置为 true启用 全匹配搜索，否则为模糊搜索
                    searchOnEnterKey: true,            // 设置为 true时，按回车触发搜索方法，否则自动触发搜索方法
                    minimumCountColumns: 1,             //最少允许的列数
                    // showColumns: true,                  //是否显示 内容列下拉框
                    showRefresh: true,                  //是否显示刷新按钮
                    // showToggle: true,                   //是否显示详细视图和列表视图的切换按钮
                    buttonsClass:'primary',
                    iconSize:'sm',
                    iconsPrefix: 'fa', // glyphicon of fa (font awesome)
                    icons: {
                        // paginationSwitchDown: 'glyphicon-collapse-down icon-chevron-down',
                        // paginationSwitchUp: 'glyphicon-collapse-up icon-chevron-up',
                        refresh: 'fa-refresh icon-refresh',
                        toggle: 'fa-list-alt icon-list-alt',
                        columns: 'fa-th icon-th',
                        detailOpen: 'fa-plus icon-plus',
                        detailClose: 'fa-minus icon-minus'
                    },
                    // detailView: true,                   //是否显示父子表
                    // showExport: true,                   //是否显示导出
                    // exportDataType: "basic",              //basic', 'all', 'selected'.
                    // clickToSelect: true,                //是否启用点击选中行
                    // singleSelect: true,
                    height: options.height,
                    onExpandRow: options.onExpandRow,
                    rowStyle: options.rowStyle || function (row, index) {
                        return {};
                    },
                    columns: options.columns
                });
                $tablelist.on('load-success.bs.table', function (data) {
                    gentelella.initSwitchery();
                });
            },
            queryParams: function (params) {
                params = $.extend({}, params);
                params.keywords = params.searchText;
                $.tableUtil._option.requestParams = params;
                return params;
            },
            refresh: function () {
                $("#tablelist").bootstrapTable('refresh', {url: $.tableUtil._option.url});
            }
        },
        buttonUtil: {
            init: function (options) {
                /* 添加 */
                $("#btn_add").click(function () {
                    resetForm();
                    var $addOrUpdateModal = $("#addOrUpdateModal");
                    $addOrUpdateModal.modal('show');
                    $addOrUpdateModal.find(".modal-dialog .modal-content .modal-header h4.modal-title").html("添加" + options.modalName);

                    var $password = $("#password");
                    if ($password && $password[0]) {
                        $password.attr("required", "required");
                    }
                    var $username = $("#username");
                    if ($username && $username[0]) {
                        $username.removeAttr("readonly");
                    }
                    $("#add-article-editor-radio").attr("checked",true);
                    $("#add-article-iso-radio").attr("checked",true);

                    bindSaveInfoEvent(options.createUrl);
                });

                /* 修改 */
                $('#tablelist').on('click', '.btn-update', function () {
                    var $this = $(this);
                    var rowId = $this.attr("data-id");
                    var getInfoUrl = options.getInfoUrl.replace("{id}", rowId);
                    let getInfoResponse = CommonService.sendGetRequest(getInfoUrl);
                    if(CommonService.isNotNull(getInfoResponse) && getInfoResponse.status){
                        // 填充页面元素
                        resetForm(getInfoResponse.data);
                        var $addOrUpdateModal = $("#addOrUpdateModal");
                        $addOrUpdateModal.modal('show');
                        $addOrUpdateModal.find(".modal-dialog .modal-content .modal-header h4.modal-title").html("修改" + options.modalName);
                        var $password = $("#password");
                        if ($password && $password[0]) {
                            $password.removeAttr("required");
                        }
                        var $username = $("#username");
                        if ($username && $username[0]) {
                            $username.attr("readonly", "readonly");
                        }

                        bindSaveInfoEvent(options.updateUrl);
                    }else{
                        CommonService.alertWinMessage(bindResponse.errorMessage);
                    }
                });

                /* 删除 */
                function remove(ids) {
                    var deleteUrl = options.removeUrl.replace("{id}", ids);
                    const params = {
                        title:'警告',
                        tips:"是否删除选中"+options.modalName+"数据",
                        okBtnTxt:'确认',
                        funcOk: function () {
                            let deleteResponse = CommonService.sendDeleteRequest(deleteUrl);
                            if(CommonService.isNotNull(deleteResponse) && deleteResponse.status) {
                                CommonService.alertWinMessage(bindResponse.errorMessage);
                                $.tableUtil.refresh();
                            }else{
                                CommonService.alertWinMessage(bindResponse.errorMessage);
                            }
                        },

                        funcClose: function () {
                        }
                    };
                    CommonService.alertWindowInfo(params);

                }

                /* 批量删除用户 */
                $("#btn_delete_ids").click(function () {
                    var selectedId = getSelectedId();
                    if (!selectedId || selectedId == '[]' || selectedId.length == 0) {
                        $.alert.error("请至少选择一条记录");
                        return;
                    }
                    remove(selectedId);
                });

                /* 删除 */
                $('#tablelist').on('click', '.btn-remove', function () {
                    var $this = $(this);
                    var userId = $this.attr("data-id");
                    remove(userId);
                });
                /* 发布及撤回 */
                $('#tablelist').on('click', '.articleRel', function () {
                    var $this = $(this);
                    var rowId = $this.attr("data-id");
                    var relStatus = $this.attr("data-stauts");
                    var getInfoUrl = options.url + "/" + rowId +"/"+relStatus;
                    let getInfoResponse = CommonService.sendGetRequest(getInfoUrl);
                    if(CommonService.isNotNull(getInfoResponse) && getInfoResponse.status){
                        CommonService.alertWinMessage(getInfoResponse.errorMessage);
                        $.tableUtil.refresh();
                    }else{
                        CommonService.alertWinMessage(getInfoResponse.errorMessage);
                    }
                });
            }
        }
    });
})(jQuery);

/**
 * 为弹窗页面中的确定按钮添加事件
 * @param url
 */
function bindSaveInfoEvent(url) {
    $(".addOrUpdateBtn").unbind('click').click(function () {
        let formUtils = new FormUtils();
        if (formUtils.validator($("#addOrUpdateForm"))) {
            let fromValue = $("#addOrUpdateForm").serializeArray();
            let requestParams={};
            $.each(fromValue, function () {
                requestParams[this.name] = this.value;
            });
            // 获取文章数据
            let articleContents = $("#default-editor").text();
            if(CommonService.isNotNull(articleContents)){
                requestParams.articleContents = articleContents;
            }
            let bindResponse = CommonService.sendPutRequest(url,requestParams);
            if(CommonService.isNotNull(bindResponse) && bindResponse.status){
                CommonService.alertWinMessage(bindResponse.errorMessage);
                $("#addOrUpdateModal").modal('hide');
                $.tableUtil.refresh();
            }else{
                CommonService.alertWinMessage(bindResponse.errorMessage);
            }
        }
    })
}

/**
 * 填充弹窗信息
 * @param info
 */
function resetForm(info) {

    $("#addOrUpdateModal form input,#addOrUpdateModal form select,#addOrUpdateModal form textarea").each(function () {
        var $this = $(this);
        clearText($this, this.type, info);
    });
}

/**
 *
 * @param $this
 * @param type
 * @param info
 * @return {boolean}
 */
function clearText($this, type, info) {

    if (info) {
        // 填充 ID
        var thisName = $this.attr("name");
        var thisValue = info[thisName];
        if(thisName == 'id'){
            for(var p in info){
                var isId = p.toLocaleLowerCase().indexOf(thisName.toLocaleLowerCase());
                if(isId != -1){
                    thisValue = info[p];
                    break;
                }
            }

        }
        if(type == 'file') {
            return false;
        }
        if (type == 'radio') {
            var _typeof = (typeof thisValue);
            if (_typeof == "boolean" || _typeof == "number") {
                $this.iCheck(((thisValue && 1 == $this.val()) || (!thisValue && 0 == $this.val())) ? 'check' : 'uncheck')
            } else if (_typeof == "string") {
                if((thisValue == '1' && 1 == $this.val()) || (thisValue != '1' && 0 == $this.val())) {
                    $this.iCheck('check');
                } else if (thisValue == $this.val()) {
                    $this.iCheck('check');
                } else {
                    $this.iCheck('uncheck');
                }
            }

        } else if (type.startsWith('select')) {
            if (thisValue == 'true' || thisValue == true) {
                thisValue = 1;
            } else if (thisValue == 'false' || thisValue == false) {
                thisValue = 0;
            }
            $this.val(thisValue);
        } else {
            if (type != 'password') {
                $this.val(thisValue);
            } else {
                $this.val('');
            }
        }
    } else {
        if (type === 'radio' || type === 'checkbox') {
            $this.iCheck('uncheck');
        } else {
            $this.val('');
        }
    }
}
